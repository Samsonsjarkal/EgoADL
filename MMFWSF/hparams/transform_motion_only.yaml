# ############################################################################
# Model: E2E Captioning with Transformer
# Encoder: Transformer Encoder
# Decoder: Transformer Decoder + (CTC/ATT joint) beamsearch
# Tokens: word
# losses: CTC + KLdiv (Label Smoothing loss)
# Training: EgoLife
# Authors:  Ke Sun
# ############################################################################
# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 9876
# modality: audio, acc, gyro, csi
modality: [acc]
__set_seed: !apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/dataset_acc_only_<modality>/<seed>
wer_file: !ref <output_folder>/wer.txt
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt


# Language model (LM) pretraining
# NB: To avoid mismatch, the speech recognizer must be trained with the same
# tokenizer used for LM training. Here, we download everything from the
# speechbrain HuggingFace repository. However, a local path pointing to a
# directory containing the lm.ckpt and tokenizer.ckpt may also be specified
# instead. E.g if you want to use your own LM / tokenizer.
# pretrained_lm_tokenizer_path: /home/kesun/speechbrain/recipes/LibriSpeech/ASR/transformer/pretrain

# Data files
dataset_csv: ../Dataclean/datalist_balance_0304_25_15.csv
data_folder: /data/kesun_EgoLife/dataset_seg #
skip_prep: False
csv_train: !ref <output_folder>/train-type=uniact.csv
csv_valid: !ref <output_folder>/valid-type=uniact.csv
csv_test: !ref <output_folder>/test-type=uniact.csv

tokenizer_file: !ref pretrain/189_word.model

# Training parameters
# To make Transformers converge, the global bath size should be large enough.
# The global batch size is computed as batch_size * n_gpus * gradient_accumulation.
# Empirically, we found that this value should be >= 128.
# Please, set your parameters accordingly.
number_of_epochs: 100
batch_size: 4 # This works for 2x GPUs with 32GB
ctc_weight: 0.3
gradient_accumulation: 32
gradient_clipping: 5.0
loss_reduction: 'batchmean'
sorting: random

# stages related parameters
stage_one_epochs: 200
lr_adam: 1.0
lr_sgd: 0.001

# Feature parameters

# Audio
Audio_sample_rate: 16000
Audio_n_fft: 1024
Audio_win_length: 50
Audio_hop_length: 10
Audio_cutoff_freq: 8000
Audio_n_mels: 32
Audio_f_max: 8000
Audio_f_min: 50


# Acc
Acc_sample_rate: 200
Acc_n_fft: 128
Acc_win_length: 200
Acc_hop_length: 10
Acc_cutoff_freq: 100

# Gyro
Gyro_sample_rate: 200
Gyro_n_fft: 64
Gyro_win_length: 200
Gyro_hop_length: 10
Gyro_cutoff_freq: 100

# CSI
CSI_sample_rate: 400
CSI_n_fft: 128
CSI_win_length: 200
CSI_hop_length: 10
CSI_cutoff_freq: 200

# Dataloader options
train_dataloader_opts:
    batch_size: !ref <batch_size>
    shuffle: True

valid_dataloader_opts:
    batch_size: 1

test_dataloader_opts:
    batch_size: 1

####################### Model parameters ###########################
# Transformer
d_model: 768
nhead: 8
num_encoder_layers: 12
num_decoder_layers: 6
d_ffn: 3072
transformer_dropout: 0.0
activation: !name:torch.nn.GELU
output_neurons: 189
vocab_size: 189

# Outputs
blank_index: 0
label_smoothing: 0.1
pad_index: 0
bos_index: 1
eos_index: 2
unk_index: 0

# Decoding parameters
min_decode_ratio: 0.0
max_decode_ratio: 1.0
valid_search_interval: 20
valid_beam_size: 10
test_beam_size: 66
lm_weight: 0
ctc_weight_decode: 0.3

############################## models ################################

acc_CNN: !new:speechbrain.lobes.models.convolution.ConvolutionFrontEnd
    input_shape: (8, 10, 80, 3)
    num_blocks: 3
    num_layers_per_block: 1
    out_channels: (30, 60, 120)
    kernel_sizes: (3, 3, 1)
    strides: (2, 2, 1)
    residuals: (False, False, False)

audio_CNN: !new:speechbrain.lobes.models.convolution.ConvolutionFrontEnd
    input_shape: (8, 10, 80)
    num_blocks: 3
    num_layers_per_block: 1
    out_channels: (30, 60, 120)
    kernel_sizes: (3, 3, 1)
    strides: (2, 2, 1)
    residuals: (False, False, False)

audio_slow_CNN: !new:speechbrain.lobes.models.convolution.ConvolutionFrontEnd
    input_shape: (8, 10, 80)
    num_blocks: 3
    num_layers_per_block: 1
    out_channels: (120, 240, 480)
    kernel_sizes: (3, 3, 1)
    strides: (8, 2, 1)
    residuals: (False, False, False)

csi_CNN: !new:speechbrain.lobes.models.convolution.ConvolutionFrontEnd
    input_shape: (8, 10, 80, 208)
    num_blocks: 3
    num_layers_per_block: 1
    out_channels: (30, 60, 120)
    kernel_sizes: (3, 3, 1)
    strides: (2, 2, 1)
    residuals: (False, False, False)

acc_CNN1: !new:speechbrain.lobes.models.convolution.ConvolutionFrontEnd
    input_shape: (8, 10, 80, 3)
    num_blocks: 3
    num_layers_per_block: 1
    out_channels: (10, 20, 40)
    kernel_sizes: (3, 3, 1)
    strides: (2, 2, 1)
    residuals: (False, False, False)

audio_CNN1: !new:speechbrain.lobes.models.convolution.ConvolutionFrontEnd
    input_shape: (8, 10, 80)
    num_blocks: 3
    num_layers_per_block: 1
    out_channels: (10, 20, 40)
    kernel_sizes: (3, 3, 1)
    strides: (2, 2, 1)
    residuals: (False, False, False)

csi_CNN1: !new:speechbrain.lobes.models.convolution.ConvolutionFrontEnd
    input_shape: (8, 10, 80, 208)
    num_blocks: 3
    num_layers_per_block: 1
    out_channels: (10, 20, 40)
    kernel_sizes: (3, 3, 1)
    strides: (2, 2, 1)
    residuals: (False, False, False)

CNN: !new:speechbrain.lobes.models.convolution.ConvolutionFrontEnd
    input_shape: (8, 10, 80, 256)
    num_blocks: 3
    num_layers_per_block: 1
    out_channels: (256, 256, 512)
    kernel_sizes: (1, 1, 1)
    strides: (1, 1, 1)
    residuals: (False, False, False)

Transformer: !new:speechbrain.lobes.models.transformer.TransformerASR.TransformerASR # yamllint disable-line rule:line-length
    input_size: 960
    tgt_vocab: !ref <output_neurons>
    d_model: !ref <d_model>
    nhead: !ref <nhead>
    num_encoder_layers: !ref <num_encoder_layers>
    num_decoder_layers: !ref <num_decoder_layers>
    d_ffn: !ref <d_ffn>
    dropout: !ref <transformer_dropout>
    activation: !ref <activation>
    normalize_before: False
    positional_encoding: True

# This is the TransformerLM that is used according to the Huggingface repository
# Visit the HuggingFace model corresponding to the pretrained_lm_tokenizer_path
# For more details about the model!
# NB: It has to match the pre-trained TransformerLM!!
# lm_model: !new:speechbrain.lobes.models.transformer.TransformerLM.TransformerLM # yamllint disable-line rule:line-length
#     vocab: !ref <output_neurons>
#     d_model: 768
#     nhead: 12
#     num_encoder_layers: 12
#     num_decoder_layers: 0
#     d_ffn: 3072
#     dropout: 0.0
#     activation: !name:torch.nn.GELU
#     normalize_before: False

tokenizer: !new:sentencepiece.SentencePieceProcessor

ctc_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <output_neurons>

seq_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <output_neurons>

modules:
    acc_CNN: !ref <acc_CNN>
    audio_CNN: !ref <audio_CNN>
    csi_CNN: !ref <csi_CNN>
    acc_CNN1: !ref <acc_CNN1>
    audio_CNN1: !ref <audio_CNN1>
    csi_CNN1: !ref <csi_CNN1>
    audio_slow_CNN: !ref <audio_slow_CNN>
    Transformer: !ref <Transformer>
    seq_lin: !ref <seq_lin>
    ctc_lin: !ref <ctc_lin>

model: !new:torch.nn.ModuleList
    - [!ref <acc_CNN>, !ref <audio_CNN>, !ref <csi_CNN>, !ref <acc_CNN1>, !ref <audio_CNN1>, !ref <csi_CNN1>, !ref <audio_slow_CNN>,!ref <Transformer>, !ref <seq_lin>, !ref <ctc_lin>]

# define two optimizers here for two-stage training
Adam: !name:torch.optim.Adam
    lr: 0
    betas: (0.9, 0.98)
    eps: 0.000000001

SGD: !name:torch.optim.SGD
    lr: !ref <lr_sgd>
    momentum: 0.99
    nesterov: True

valid_search: !new:speechbrain.decoders.S2STransformerBeamSearch
    modules: [!ref <Transformer>, !ref <seq_lin>, !ref <ctc_lin>]
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    blank_index: !ref <blank_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <valid_beam_size>
    ctc_weight: !ref <ctc_weight_decode>
    using_eos_threshold: False
    length_normalization: False


test_search: !new:speechbrain.decoders.S2STransformerBeamSearch
    modules: [!ref <Transformer>, !ref <seq_lin>, !ref <ctc_lin>]
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    blank_index: !ref <blank_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <test_beam_size>
    ctc_weight: !ref <ctc_weight_decode>
    # lm_weight: !ref <lm_weight>
    # lm_modules: !ref <lm_model>
    temperature: 1.15
    # temperature_lm: 1.15
    using_eos_threshold: False
    length_normalization: True

log_softmax: !new:torch.nn.LogSoftmax
    dim: -1

ctc_cost: !name:speechbrain.nnet.losses.ctc_loss
    blank_index: !ref <blank_index>
    reduction: !ref <loss_reduction>

seq_cost: !name:speechbrain.nnet.losses.kldiv_loss
    label_smoothing: !ref <label_smoothing>
    reduction: !ref <loss_reduction>

noam_annealing: !new:speechbrain.nnet.schedulers.NoamScheduler
    lr_initial: !ref <lr_adam>
    n_warmup_steps: 25000
    model_size: !ref <d_model>

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        noam_scheduler: !ref <noam_annealing>
        acc_normalize: !ref <acc_normalize>
        gyro_normalize: !ref <gyro_normalize>
        audio_normalize: !ref <audio_normalize>
        csi_normalize: !ref <csi_normalize>
        counter: !ref <epoch_counter>

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

acc_normalize: !new:speechbrain.processing.features.InputNormalization
    norm_type: global
    update_until_epoch: 4

gyro_normalize: !new:speechbrain.processing.features.InputNormalization
    norm_type: global
    update_until_epoch: 4

audio_normalize: !new:speechbrain.processing.features.InputNormalization
    norm_type: global
    update_until_epoch: 4

csi_normalize: !new:speechbrain.processing.features.InputNormalization
    norm_type: global
    update_until_epoch: 4

augmentation: !new:speechbrain.lobes.augment.SpecAugment
    time_warp: True
    time_warp_window: 5
    time_warp_mode: bicubic
    freq_mask: True
    n_freq_mask: 2
    time_mask: True
    n_time_mask: 2
    replace_with_zero: False
    freq_mask_width: 30
    time_mask_width: 40

speed_perturb: !new:speechbrain.processing.speech_augmentation.SpeedPerturb
    orig_freq: !ref <Audio_sample_rate>
    speeds: [95, 100, 105]

acc_compute_features: !new:speechbrain.lobes.features.LogSpec
    sample_rate: !ref <Acc_sample_rate>
    n_fft: !ref <Acc_n_fft>
    win_length: !ref <Acc_win_length>
    hop_length: !ref <Acc_hop_length>
    cutoff_freq: !ref <Acc_cutoff_freq>

gyro_compute_features: !new:speechbrain.lobes.features.LogSpec
    sample_rate: !ref <Gyro_sample_rate>
    n_fft: !ref <Gyro_n_fft>
    win_length: !ref <Gyro_win_length>
    hop_length: !ref <Gyro_hop_length>
    cutoff_freq: !ref <Gyro_cutoff_freq>

# audio_compute_features: !new:speechbrain.lobes.features.LogSpec
#     sample_rate: !ref <Audio_sample_rate>
#     n_fft: !ref <Audio_n_fft>
#     win_length: !ref <Audio_win_length>
#     hop_length: !ref <Audio_hop_length>
#     cutoff_freq: !ref <Audio_cutoff_freq>

audio_compute_features: !new:speechbrain.lobes.features.Fbank
    sample_rate: !ref <Audio_sample_rate>
    n_fft: !ref <Audio_n_fft>
    n_mels: !ref <Audio_n_mels>
    win_length: !ref <Audio_win_length>
    hop_length: !ref <Audio_hop_length>
    f_max: !ref <Audio_f_max>
    f_min: !ref <Audio_f_min>

csi_compute_features: !new:speechbrain.lobes.features.LogSpec
    sample_rate: !ref <CSI_sample_rate>
    n_fft: !ref <CSI_n_fft>
    win_length: !ref <CSI_win_length>
    hop_length: !ref <CSI_hop_length>
    cutoff_freq: !ref <CSI_cutoff_freq>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
acc_computer: !name:speechbrain.utils.Accuracy.AccuracyStats

pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
   collect_in: !ref <save_folder>
   loadables:
      # lm: !ref <lm_model>
      tokenizer: !ref <tokenizer>
   paths:
      # lm: !ref <pretrained_lm_tokenizer_path>/lm.ckpt
      tokenizer: !ref <tokenizer_file>
